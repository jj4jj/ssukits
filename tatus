diff --git a/utility/Coroutine.h b/utility/Coroutine.h
index d68720a..c4c0ff3 100644
--- a/utility/Coroutine.h
+++ b/utility/Coroutine.h
@@ -3,71 +3,65 @@
 
 
 
-typedef void	CoroutineFunc(Coroutine co,void* arg);
+typedef void	CoroutineFunc(int coid,void* arg);
 
-
-struct	CoroutineData
+struct	Coroutine
 {
-	int iID;
+	int		iID;
+	uint8_t bState;
 	//context			
-	Buffer	stack;
+	Buffer		stack;
 	//context
 	ucontext_t	ctx;
+	Coroutine	*from;
+	enum {
+		DEFAULT_STACK_SIZE=8192,	
+	};
 };
 
-class Coroutine
-{
-friend class CoroutineMgr;
-protected:
-	Coroutine(CoroutineData* p):pData(p){}
-public:
-	//return val equal to param is ok . 
-    int     Yield(int ret);
-	int		Switch(Coroutine co,int ret);
-	//return 0 if cf is over
-	//return the param of Yield and Switch
-    int     Start(CoroutineFunc cf);
-    int     Resume();
-private:
-	CoroutineData*	pData;
-};
-
-
 
-class CoroutineMgr : Singleton<CoroutineMgr>
+class CoroutineMgr
 {
 public:
-    Coroutine	Create();
+    int	Create(CoroutineFunc f,void * arg);
+	int	Resume(int coid);
+	int	Yield(int coid);
+	int	GetStatus(int coid);
 	Coroutine*	Find(int id);
-	void		Destroy(Coroutine co);
 private:
-    int				iNextCOID;
 	int				iCosCap;
 	int				iCosCount;
-	CoroutineData*  cos;	
+	Coroutine*		cos;	
+	int				iNextId;
 public:
-	static  Tf(void* p)
+	static void	f1(int,void* p)
 	{
-		for(int i = 0;i < 5;++i)
-		{
-			printf("Tf:%d\n",i);
-			CoroutineMgr::Instance().yield(5-i-1);	
-		}
+		const char * s = (const char*)p;
+		printf("%s:%s\n",__FUNCTION__,s);
+		printf("%s:before yield\n",__FUNCTION__);
+		yield();
+		printf("%s:after yield\n",__FUNCTION__);
 	}
-	
-	void	Usage()
+	static void	f2(int,void* p)
+	{
+		const char * s = (const char*)p;
+		printf("%s:%s\n",__FUNCTION__,s);
+		Coroutine co = CoroutineMgr::Instance().Create(f1,"in f2 create co");		
+		printf("%s:before yield\n",__FUNCTION__);
+		CoroutineMgr::Instance().yield(co);//equal to resume(co);
+		printf("%s:after yield\n",__FUNCTION__);
+	}
+	void	Test()
 	{
 		
-		Coroutine co = CoroutineMgr::Instance().Create();		
-		int t = co.Start(Tf);
-		for(int i = 0;i < t; ++i)
-		{
-			printf("Usage:%d",i);
-			co.Resume();	
-		}
-		co.Start(Tf);
-		co.Destroy();
-		
+		int coid1 = Create(f1,"hello,world!");		
+		int coid2 = Create(f2,"nihao,shijie!");		
+		printf("co1 status %d\n",GetStatus(coid1));
+		printf("co1 status %d\n",GetStatus(coid2));
+		Resume(coid1);
+		printf("co1 status %d\n",GetStatus(coid1));
+		Resume(coid2);
+		printf("co1 status %d\n",GetStatus(coid2));
 	}
 
 };
diff --git a/utility/EncryptionHelper.h b/utility/EncryptionHelper.h
index 4232e6c..0b33a6a 100644
--- a/utility/EncryptionHelper.h
+++ b/utility/EncryptionHelper.h
@@ -5,8 +5,10 @@
 class EncrptionHelper
 {
 public:
-    static int  MD5(IN const Buffer & text,INOUT Buffer & md5sum);    
-
+	// 0 is ok
+    static int MD5(IN const Buffer & text,INOUT Buffer & md5sum);    
+	static int RSAEncrypt(IN const Buffer & decrypt,INOUT Buffer & crypt,RSAParam * param); 
+	static int RSADecrypt(IN const Buffer & crypt,INOUT Buffer & deypt,RSAParam * param); 
 };
 
 
